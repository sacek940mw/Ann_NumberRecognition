/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

public void buttonStart_click(GButton source, GEvent event) { //_CODE_:buttonStart:601129:
  //println("buttonStart - GButton >> GEvent." + event + " @ " + millis());
  draw = true;
  int a = slider1.getValueI();
  int b = slider2.getValueI();
  int c = slider3.getValueI();
  if(b == 0 && c == 0){
    neuralnet = new Network(196,a,10);
  }else if(b != 0 && c == 0){
    neuralnet = new Network(196,a,b,10);
  }else if(b == 0 && c != 0){
    neuralnet = new Network(196,a,c,10);
  }else{
    neuralnet = new Network(196,a,b,c,10);
  }
  trainCount = 0;
} //_CODE_:buttonStart:601129:

public void slider1_change1(GSlider source, GEvent event) { //_CODE_:slider1:214612:
  //println("slider1 - GSlider >> GEvent." + event + " @ " + millis());
  gui_change = true;
} //_CODE_:slider1:214612:

public void slider2_change1(GSlider source, GEvent event) { //_CODE_:slider2:998451:
  //println("slider2 - GSlider >> GEvent." + event + " @ " + millis());
  gui_change = true;
} //_CODE_:slider2:998451:

public void buttonTest_click(GButton source, GEvent event) { //_CODE_:buttonTest:542927:
  //println("button1 - GButton >> GEvent." + event + " @ " + millis());
  test = true;
} //_CODE_:buttonTest:542927:

public void slider3_change1(GSlider source, GEvent event) { //_CODE_:slider3:636532:
  //println("slider3 - GSlider >> GEvent." + event + " @ " + millis());
  gui_change = true;
} //_CODE_:slider3:636532:



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setMouseOverEnabled(false);
  surface.setTitle("Sketch Window");
  buttonStart = new GButton(this, 312, 62, 80, 30);
  buttonStart.setText("Start");
  buttonStart.addEventHandler(this, "buttonStart_click");
  label1 = new GLabel(this, 1, 34, 398, 20);
  label1.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label1.setText("Liczba neuron√≥w warstw ukrytych: (0 = brak warstwy)");
  label1.setOpaque(false);
  slider1 = new GSlider(this, 1, 55, 199, 40, 10.0);
  slider1.setShowValue(true);
  slider1.setShowLimits(true);
  slider1.setLimits(25, 25, 100);
  slider1.setNbrTicks(5);
  slider1.setNumberFormat(G4P.INTEGER, 0);
  slider1.setOpaque(false);
  slider1.addEventHandler(this, "slider1_change1");
  slider2 = new GSlider(this, 1, 96, 199, 40, 10.0);
  slider2.setShowValue(true);
  slider2.setShowLimits(true);
  slider2.setLimits(0, 0, 100);
  slider2.setNumberFormat(G4P.INTEGER, 0);
  slider2.setOpaque(false);
  slider2.addEventHandler(this, "slider2_change1");
  buttonTest = new GButton(this, 312, 101, 80, 30);
  buttonTest.setText("Test");
  buttonTest.addEventHandler(this, "buttonTest_click");
  slider3 = new GSlider(this, 1, 136, 199, 40, 10.0);
  slider3.setShowValue(true);
  slider3.setShowLimits(true);
  slider3.setLimits(0, 0, 100);
  slider3.setNumberFormat(G4P.INTEGER, 0);
  slider3.setOpaque(false);
  slider3.addEventHandler(this, "slider3_change1");
}

// Variable declarations 
// autogenerated do not edit
GButton buttonStart; 
GLabel label1; 
GSlider slider1; 
GSlider slider2; 
GButton buttonTest; 
GSlider slider3; 
